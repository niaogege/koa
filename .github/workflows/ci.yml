name: CI

# 在main分支发生push事件/pull_request时触发。
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  # 设置环境变量
  TARGET_DIR: /www/web/koa

jobs:
  # 打包构建
  depoly:
    runs-on: ubuntu-latest # 运行在虚拟机环境ubuntu-latest
    steps:
      - name: Checkout # 步骤1
        uses: actions/checkout@v1 # 使用的动作。格式：userName/repoName。作用：检出仓库，获取源码。 官方actions库：https://github.com/actions
      # - name: Use Node.js # 步骤2
      #   uses: actions/setup-node@v1 # 作用：安装nodejs
      #   with:
      #     node-version: ${{ matrix.node-version }} # 版本
      # - name: run deploy # 步骤3
      #   env: # 设置环境变量
      #     GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }} # toKen私密变量
      #   run: npm i && npm run deploy

      # 3. 将打包后的代码部署到 gh-pages 分支
      # - name: Deploy 🚀
      #   uses: JamesIves/github-pages-deploy-action@3.5.7
      #   with:
      #     # 为了让 GitHub触发重新构建页面，您必须使用存储库提供的GitHub令牌来提供操作, GITHUB_TOKEN 是系统默认提供的  不需要单独配置环境变量
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     BRANCH: gh-pages
      #     FOLDER: dist
      - name: Deploy Server
        uses: cross-the-world/ssh-scp-ssh-pipelines@latest
        env:
          WELCOME: "ssh scp ssh pipelines CPP server"
          LASTSSH: "after copying"
        with:
          host: "111.230.199.157"
          user: "root"
          pass: ${{ secrets.FTP_PASSWORD }}
          connect_timeout: 20s
          first_ssh: |-
            rm -rf $TARGET_DIR
            echo $WELCOME   
            mkdir -p $TARGET_DIR
          scp: |-
            './*' => $TARGET_DIR/
          last_ssh: |-
            cd $TARGET_DIR
            node -v
            npm i
            pm2 -v
            pm2 start ./index.js -i max
            echo $LASTSSH
